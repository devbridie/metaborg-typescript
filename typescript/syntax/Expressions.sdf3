module Expressions

imports
  Common
  Functions
  Statements
  Classes
  Types

context-free syntax
  Expression = <(<Expression>)> {bracket}
  
  Expression.ThisExpr = <this>
  IdExpr.IdExpr = ID
  Expression = IdExpr
  Expression = Literal
  Expression.ObjectLiteral = <{<{NameWithValue ","}*>}>
  NameWithValue.NameWithValue = <<ID>: <Expression>>
  Expression.CallExpr = <<Expression>(<{Expression ","}*>)>
  FunctionDeclaration.FunctionDeclaration = <function <ID><CallSignature> {
    <StatementList>
  }>
  Expression = FunctionDeclaration
  
  Expression.AnonymousFunction = <function <CallSignature> {
    <StatementList>
  }>
  Expression.ArrowExprExpr = [[CallSignature] => [Expression]]
  Expression.ArrowExprBlock = [[CallSignature] => { [StatementList] }]
  MemberExpr.MemberExpr = <<Expression>.<ID>>
  Expression = MemberExpr
  ArrayAccessExpr.ArrayAccessExpr = <<Expression>[<Expression>]>
  Expression = ArrayAccessExpr
  Expression.NewExpr = <new <Expression>(<{Expression ","}*>)>
  Expression = ClassExpr
  Expression.AssignExpr = <<LHS> <AssignmentOperator> <Expression>>
  LHS = IdExpr
  LHS = MemberExpr
  LHS = ArrayAccessExpr
  
  AssignmentOperator.AssignmentEquals = <=>
  AssignmentOperator.AssignmentPlus = <+=>
  AssignmentOperator.AssignmentMinus = <-=>
  AssignmentOperator.AssignmentMultiply = <*=>
  AssignmentOperator.AssignmentDivide = </=>
  AssignmentOperator.AssignmentModulo = <%=>
  AssignmentOperator.AssignmentExponentiation = <**=>
  AssignmentOperator.AssignmentShiftLeft = [<<=]
  AssignmentOperator.AssignmentShiftRight = [>>=]
  AssignmentOperator.AssignmentUnsignedRightShift = [>>>=]
  AssignmentOperator.AssignmentBitwiseOr = [|=]
  AssignmentOperator.AssignmentBitwiseXor = [^=]
  AssignmentOperator.AssignmentBitwiseAnd = [&=]
  
  ClassExpr.ClassExpr = <class <ID> <ClassParent> <ImplementsClause> {
    <{ClassElement "\n"}*>
  }>
 
  Expression.AddExpr = <<Expression> + <Expression>> {left}
  Expression.SubtractExpr = <<Expression> - <Expression>> {left}
  Expression.MultiplyExpr = <<Expression> * <Expression>> {left}
  Expression.DivideExpr = <<Expression> / <Expression>> {left}
  Expression.ModuloExpr = <<Expression> % <Expression>> {left}
  Expression.ExponentiationExpr = [[Expression] ** [Expression]] {left}
  
  Expression.LtExpr = [[Expression] < [Expression]] {left}
  Expression.GtExpr = [[Expression] > [Expression]] {left}
  Expression.LteExpr = [[Expression] <= [Expression]] {left}
  Expression.GteExpr = [[Expression] >= [Expression]] {left}
  Expression.InstanceofExpr = [[Expression] instanceof [Expression]] {left}
  
  Expression.EqEqExpr = [[Expression] == [Expression]] {left}
  Expression.NegEqExpr = [[Expression] != [Expression]] {left}
  Expression.EqEqEqExpr = [[Expression] === [Expression]] {left}
  Expression.NegEqEqExpr = [[Expression] !== [Expression]] {left}
  
  Expression.BitwiseAndExpr = [[Expression] & [Expression]] {left}
  Expression.BitwiseOrExpr = [[Expression] | [Expression]] {left}
  Expression.BitwiseXorExpr = [[Expression] ^ [Expression]] {left}
  Expression.BitwiseShiftLeftExpr = [[Expression] << [Expression]] {left}
  Expression.BitwiseShiftRightExpr = [[Expression] >> [Expression]] {left}
  Expression.BitwiseUnsignedShiftRightExpr = [[Expression] >>> [Expression]] {left}
  
  Expression.LogicalOrExpr = [[Expression] || [Expression]] {left}
  Expression.LogicalAndExpr = [[Expression] && [Expression]] {left}
  
  Expression.ConditionalExpr = [[Expression] ? [Expression] : [Expression]] {left}
  
  Expression.DeleteExpr = [delete [Expression]]
  Expression.VoidExpr = [void [Expression]]
  Expression.TypeofExpr = [typeof [Expression]]
  Expression.IncrementPreExpr = [++[Expression]]
  Expression.DecrementPreExpr = [--[Expression]]
  Expression.IncrementPostExpr = [[Expression]++]
  Expression.DecrementPostExpr = [[Expression]--]
  Expression.PlusExpr = [+[Expression]]
  Expression.NegExpr = [-[Expression]]
  Expression.BitwiseNotExpr = [~[Expression]]
  Expression.NegateExpr = [![Expression]]
