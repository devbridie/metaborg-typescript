module typescript

imports
  
  Common

context-free start-symbols
  
  Start
  
  Statement  
  
  Expression
  
  Type
  
  NameTypePair
  NameExprPair

//  Statement
//  Block
//  
//  VariableType
//  
//  ClassMember
//  
//  Type
//  Expression
//  
//  NameTypePair
//  NameExprPair

context-free syntax
  
  Start.Program = Statement*
  
  Statement.Declaration = <let <ID> : <ID> = <Expression>;>
  Statement.Assignment  = <<ID> = <Expression>;>
  Statement.Interface   = <interface <ID> { <{NameTypePair ","}*> }>
  
  Expression.NumberLiteral = INT
  Expression.Identifier    = ID
  Expression.StringLiteral = <"<ID>">
  Expression.ObjectLiteral = <{ <{NameExprPair ","}*> }>
  
  Type = ID
  // Type = "{" {NameTypePair ","}* "}"
  
  NameTypePair = ID ":" Type
  NameExprPair = ID ":" Expression
  
//  Start.Empty = <>
//  Start.Program = Statement*
//  
//  Block = "{" Statement* "}"
//  
//  Statement.Assignment  = ID "=" Expression ";"
//  
//  Statement.Block = Block
//    
//  Statement.VarDecl = VariableType ID ";"
//  Statement.VarDecl = VariableType NameTypePair ";"
//  Statement.VarDecl = VariableType ID "=" Expression ";"
//  Statement.VarDecl = VariableType NameTypePair "=" Expression ";"  
//  
//  VariableType.Var = "var"
//  VariableType.Const = "const"
//  VariableType.Let = "let"
//  
//  Statement.ClassDecl = "class" ID "{" ClassMember* "}" 
//  
//  ClassMember.Property = NameTypePair ";"
//  ClassMember.Method   = ID "(" {NameTypePair ","}* ")" ":" Type Block
//  
//  Statement.FuncDecl = "function" ID "(" {NameTypePair ","}* ")" Block
//  Statement.FuncDecl = "function" ID "(" {NameTypePair ","}* ")" ":" Type Block
//
//  Statement.Return = "return" Expression ";"
//  
//  Statement.If = "if" "(" Expression ")" Statement
//  Statement.If = "if" "(" Expression ")" Statement "else" Statement
//  
//  Type.Number = "number"
//  Type.String = "string"
//  Type.Object = "{" {NameTypePair ","}* "}"
//  
//  Expression.Number = INT
//  Expression.String = STRING
//  Expression.Object = "{" {NameExprPair ","}* "}"
//  Expression.Call   = {Expression "."}+ "(" {Expression ","}* ")"
//  
//  NameTypePair = ID ":" Type
//  NameExprPair = ID ":" Expression