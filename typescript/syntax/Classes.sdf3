module Classes

imports
  Common
  Expressions
  Functions
  Statements
  Types

context-free syntax

  ClassDeclaration.ClassDeclaration = <class <ID> <ClassParent> <ImplementsClause> {
    <ClassElement*>
  }>
  ClassExpression.ClassExpressionWithTypeParameters = <class <ID> <TypeParameters> <ClassParent> <ImplementsClause> {
    <ClassElement*>
  }>
  
  ClassParent.NoParent =
  ClassParent.ClassParent = <extends <ID>>
  
  ImplementsClause.NoImplements =  
  ImplementsClause.Implements = <implements <{ID ", "}*>>
  
  // TODO empty bodies allowed in abstract classes
  ClassElement.FunctionMember = <<{MemberModifier " "}*> <ID><CallSignature> {
    <StatementList>
  }>
  MemberModifier.Static = <static>
  MemberModifier.Public = <public>
  MemberModifier.Private = <private>
  
  ClassElement.PropertyMemberWithInitializer = <<NameWithOptionalType> = <Expression>>
  ClassElement.PropertyMemberWithInitializer__SM = <<NameWithOptionalType> = <Expression>;>
  ClassElement.PropertyMemberWithoutInitializer = <<NameWithOptionalType>>
  ClassElement.PropertyMemberWithoutInitializer__SM = <<NameWithOptionalType>;> 